#include <iostream>
#include "PlayState.h"
#include "Game.h"
#include "Timer.h"
#include "Level.h"
#include "LevelFactory.h"
#include "MenuState.h"
#include "ContinueState.h"
#include "GameObjects.h"
#include <iostream>

PlayState PlayState::m_PlayState;
TextRenderer PlayState::textRenderer;

PlayState::PlayState()
{
}

void PlayState::Init()
{
	playerDestroyed = false;
	bossDestroyed = false;		
	level.Init(GameObjects::Instance()->CurrentLevel);	
	blackScreen = BlackScreen(1000);
	blackScreen.SetToFadeIn();
	blackScreen.sprite = Sprite::Load(const_cast<char *>("blackScreen.png"), false);
	SDL_Color textColor = { 255, 255, 255 };
	textRenderer = TextRenderer(const_cast<char *>("manaspc.ttf"),28, textColor);
	statePhase = PLAY;
}

void PlayState::Clean()
{	
	level.Clean();
	blackScreen.Clear();
}

void PlayState::Pause()
{
	level.Pause();
}

void PlayState::Resume()
{
	
}

void PlayState::HandleEvents(Game* game)
{
	SDL_Event event;				
	while (SDL_PollEvent(&event)) 
	{
		level.HandleEvents(event, game);		
		switch (event.type) 
		{
			case SDL_QUIT:										
				game->Quit();				
				break;
			case SDL_KEYDOWN:
			switch(event.key.keysym.sym)
			{
				case SDLK_RETURN:
					game->ChangeState(MenuState::Instance());
																			
					break;
			}
		}
	}
	
}

void PlayState::Update(Game* game) 
{

	blackScreen.Update(fadeTimer.get_ticks());
	level.Update();

	
	if((bossDestroyed || playerDestroyed) && statePhase == PLAY)
	{
		printf("endtimer started\n");
		endTimer.start();
		statePhase = ENDING;		
	}	

	if(endTimer.get_ticks() > 5000 && statePhase == ENDING) 
	{		
		endTimer.reset();
		statePhase = DONE;
		blackScreen.SetToFadeOut();	
	}

	if(statePhase == DONE)
	{		
		if(blackScreen.FullAlpha())
		{
			blackScreen.Clear();
			if(playerDestroyed)
			{						
				game->ChangeState(ContinueState::Instance());
			}
			else if(bossDestroyed)
			{				
				GameObjects::Instance()->CurrentLevel++;
				game->ChangeState(PlayState::Instance());
			}			
		}		
	}
	fadeTimer.start();
}

void PlayState::Draw(Game* game) 
{
	level.Draw(game);
	blackScreen.Draw(game->GetScreen());
	SDL_Flip(game->GetScreen());
}


